{"ast":null,"code":"import _defineProperty from \"/Users/kuzmycz/Documents/Software/Research/react/crwn-clothing/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAz25xJziNWmikXrA26j7GhG9wpusw6sUw\",\n  authDomain: \"crwn-db-c7ea1.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-c7ea1.firebaseio.com\",\n  projectId: \"crwn-db-c7ea1\",\n  storageBucket: \"\",\n  messagingSenderId: \"324016107808\",\n  appId: \"1:324016107808:web:2b40a7e800a50e15ca2745\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/kuzmycz/Documents/Software/Research/react/crwn-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\n\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n    apiKey: \"AIzaSyAz25xJziNWmikXrA26j7GhG9wpusw6sUw\",\n    authDomain: \"crwn-db-c7ea1.firebaseapp.com\",\n    databaseURL: \"https://crwn-db-c7ea1.firebaseio.com\",\n    projectId: \"crwn-db-c7ea1\",\n    storageBucket: \"\",\n    messagingSenderId: \"324016107808\",\n    appId: \"1:324016107808:web:2b40a7e800a50e15ca2745\"\n  };\n\n  export const createUserProfileDocument = async ( userAuth, additionalData ) => {\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    const snapShot = await userRef.get();\n\n    if (!snapShot.exists) {\n        const {displayName, email} = userAuth;\n        const createdAt = new Date();\n\n        try {\n            userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            })\n\n        } catch (error) {\n            console.log('error creating user', error.message);\n        }\n    }\n\n    return userRef;\n  }\n\n  export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n      const collectionRef = firestore.collection(collectionKey);\n\n      const batch = firestore.batch();\n\n      objectsToAdd.forEach( (obj) => {\n          const newDocRef = collectionRef.doc();\n          batch.set(newDocRef, obj);\n      });\n\n      return await batch.commit();\n\n  };\n\n  export const convertCollectionsSnapshotToMap = ( collections ) => {\n      const transformedCollection = collections.docs.map(doc => {\n          const { title, items } = doc.data();\n\n          return {\n              routeName: encodeURI(title.toLowerCase()),\n              id: doc.id,\n              title,\n              items\n          };\n      });\n\n      return transformedCollection.reduce((accumulator, collection) => {\n          accumulator[collection.title.toLowerCase()] = collection;\n\n          return accumulator;\n      }, {});\n  };\n\n  export const getCurrentUser = () => {\n      return new Promise((resolve, reject) => {\n          const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n              unsubscribe();\n              resolve(userAuth);\n          }, reject)\n      })\n  }\n\n  firebase.initializeApp(config);\n\n  export const auth = firebase.auth();\n  export const firestore = firebase.firestore();\n\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\n\n  googleProvider.setCustomParameters({ prompt: 'select_account' });\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\n  export default firebase;"]},"metadata":{},"sourceType":"module"}